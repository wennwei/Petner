import SwiftUI

struct Preview: View {
    
    @State private var selectedDay = Date.now
    @State private var weekday = Calendar.current.nextWeekend(startingAfter: Date(), direction: .forward)?.end
    @ObservedObject var myEvents: Events
    @EnvironmentObject var database: DBHelper
    @EnvironmentObject var dateHolder : DateHolder
    
    @State private var showingEditEvent = false // for editting/deleting events
    @State private var showingAddEvent = false  // for adding events
    
    @State private var day: Int = 0
    @State private var month: Int = 0
    @State private var year: Int = 0
    @State private var desc: String = ""
    @State private var startTime: Int = 0
    @State private var endTime: Int = 0
    @State private var category: String = ""
    @State private var completed: Int = 0
    @State private var currEvent = EventStruct(day: 0, month: 0, year: 0, desc: "", startTime: 0, endTime: 0, category: "", completed: 0)
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                Text("")
                TasksView
            }
            .navigationTitle("Preview")
        }
    }
    
    
    var leisureRow: some View {
        ForEach(0...6, id: \.self) { count in
            let today = Date()
            let calendar = Calendar.current
            if let next7days = calendar.date(byAdding: .day, value: count, to: today) {
                ForEach(myEvents.leisureEvents, id: \.self) { event in
                    if checkIfSameDay(selectedDay: next7days, event: event) {
                        Button {} label: {
                            VStack {
                                HStack {
                                    Text(event.desc)
                                        .font(.title3)
                                        .fontWeight(.semibold)
                                        .padding(.bottom, 8)
                                        .padding(.top, 5)
                                
                                    Spacer()
                                
                                }
                                HStack {
                                    Text("Date: \(event.day) / \(event.month)")
                                    Spacer()
                                }
                                HStack {
                                    Text("Starts: \(event.startTime):00  Ends: \(event.endTime):00")
                                    Spacer()
                                }
                            }
                        }
                        .foregroundColor(.primary)
                    }
                }
            }
        }
    }
    
    var examRow: some View {
        ForEach(0...6, id: \.self) { count in
            let today = Date()
            let calendar = Calendar.current
            if let next7days = calendar.date(byAdding: .day, value: count, to: today) {
                ForEach(myEvents.examEvents, id: \.self) { event in
                    if checkIfSameDay(selectedDay: next7days, event: event) {
                        Button {} label: {
                            VStack {
                                HStack {
                                    Text(event.desc)
                                        .font(.title3)
                                        .fontWeight(.semibold)
                                        .padding(.bottom, 8)
                                        .padding(.top, 5)
                                
                                    Spacer()
                                
                                }
                                HStack {
                                    Text("Date: \(event.day) / \(event.month)")
                                    Spacer()
                                }
                                HStack {
                                    Text("Starts: \(event.startTime):00  Ends: \(event.endTime):00")
                                    Spacer()
                                }
                            }
                        }
                        .foregroundColor(.primary)
                    }
                }
            }
        }
    }
    
    var classRow: some View {
        ForEach(0...6, id: \.self) { count in
            let today = Date()
            let calendar = Calendar.current
            if let next7days = calendar.date(byAdding: .day, value: count, to: today) {
                ForEach(myEvents.classEvents, id: \.self) { event in
                    if checkIfSameDay(selectedDay: next7days, event: event) {
                        Button {} label: {
                            VStack {
                                HStack {
                                    Text(event.desc)
                                        .font(.title3)
                                        .fontWeight(.semibold)
                                        .padding(.bottom, 8)
                                        .padding(.top, 5)
                                
                                    Spacer()
                                
                                }
                                HStack {
                                    Text("Date: \(event.day) / \(event.month)")
                                    Spacer()
                                }
                                HStack {
                                    Text("Starts: \(event.startTime):00  Ends: \(event.endTime):00")
                                    Spacer()
                                }
                            }
                        }
                        .foregroundColor(.primary)
                    }
                }
            }
        }
    }
    
    var assignmentRow: some View {
        ForEach(0...6, id: \.self) { count in
            let today = Date()
            let calendar = Calendar.current
            if let next7days = calendar.date(byAdding: .day, value: count, to: today) {
                ForEach(myEvents.assignmentEvents, id: \.self) { event in
                    if checkIfSameDay(selectedDay: next7days, event: event) {
                        Button {} label: {
                            VStack {
                                HStack {
                                    Text(event.desc)
                                        .font(.title3)
                                        .fontWeight(.semibold)
                                        .padding(.bottom, 8)
                                        .padding(.top, 5)
                                
                                    Spacer()
                                
                                }
                                HStack {
                                    Text("Date: \(event.day) / \(event.month)")
                                    Spacer()
                                }
                                HStack {
                                    Text("Starts: \(event.startTime):00  Ends: \(event.endTime):00")
                                    Spacer()
                                }
                            }
                        }
                        .foregroundColor(.primary)
                    }
                }
            }
        }
    }
    
    var revisionRow: some View {
        ForEach(0...6, id: \.self) { count in
            let today = Date()
            let calendar = Calendar.current
            if let next7days = calendar.date(byAdding: .day, value: count, to: today) {
                ForEach(myEvents.revisionEvents, id: \.self) { event in
                    if checkIfSameDay(selectedDay: next7days, event: event) {
                        Button {} label: {
                            VStack {
                                HStack {
                                    Text(event.desc)
                                        .font(.title3)
                                        .fontWeight(.semibold)
                                        .padding(.bottom, 8)
                                        .padding(.top, 5)
                                
                                    Spacer()
                                
                                }
                                HStack {
                                    Text("Date: \(event.day) / \(event.month)")
                                    Spacer()
                                }
                                HStack {
                                    Text("Starts: \(event.startTime):00  Ends: \(event.endTime):00")
                                    Spacer()
                                }
                            }
                        }
                        .foregroundColor(.primary)
                    }
                }
            }
        }
    }
    
    
    func checkIfSameDay(selectedDay: Date, event: EventStruct) -> Bool {
        let components = Calendar.current.dateComponents([.day, .month, .year], from: selectedDay)
        let day = components.day ?? 0
        let month = components.month ?? 0
        let year = components.year ?? 0
        if event.day == day && event.month == month && event.year == year {
            return true
        }
        return false
    }
    
    func checkIfWeekend(selectedDay: Date, counter: Int) -> Int {
        if Calendar.current.isDateInWeekend(selectedDay) {
            return counter * -1
        }
        return counter
    }
    
    func goToEdit(event: EventStruct) {
        currEvent = event // make currEvent contain details of event that is tapped
        day = event.day
        month = event.month
        year = event.year
        desc = event.desc
        startTime = event.startTime
        endTime = event.endTime
        category = event.category
        completed = event.completed
        showingEditEvent = true
    }
    
    func toggleButton(oldEvent: EventStruct) {
        var completedEvent = oldEvent
        if completedEvent.completed == 1 {
            completedEvent.completed = 0
        } else {
            completedEvent.completed = 1
        }
        
        if oldEvent.category == "Exam" {
            if let idx = myEvents.examEvents.firstIndex(of: oldEvent) {
                myEvents.examEvents[idx] = completedEvent
            }
        } else if oldEvent.category == "Leisure" {
            if let idx = myEvents.leisureEvents.firstIndex(of: oldEvent) {
                myEvents.leisureEvents[idx] = completedEvent
            }
        } else if oldEvent.category == "Class" {
            if let idx = myEvents.classEvents.firstIndex(of: oldEvent) {
                myEvents.classEvents[idx] = completedEvent
            }
        } else if oldEvent.category == "Assignment" {
            if let idx = myEvents.assignmentEvents.firstIndex(of: oldEvent) {
                myEvents.assignmentEvents[idx] = completedEvent
            }
        } else if oldEvent.category == "Revision" {
            if let idx = myEvents.revisionEvents.firstIndex(of: oldEvent) {
                myEvents.revisionEvents[idx] = completedEvent
            }
        }
        database.update(oldEvent: oldEvent, event: completedEvent)
    }
    
    var TasksView: some View {
        List {
            Section(header: Text("Leisure")) {
                leisureRow
            }
            Section(header: Text("Exam")) {
                examRow
            }
            Section(header: Text("Class")) {
                classRow
            }
            Section(header: Text("Assignment")) {
                assignmentRow
            }
            Section(header: Text("Revision")) {
                revisionRow
            }
        }
        .onAppear() {
            CalendarHelper().getEvents(database: database, myEvents: myEvents) // update array with data from database
            CalendarHelper().sortCompleted(myEvent: myEvents) // sort completed/incomplete events in the array
        }
        .listStyle(.grouped)
        .sheet(isPresented: $showingAddEvent) {
            AddEvent(myEvents: myEvents, currDay: selectedDay)
                .environmentObject(database)
        }
        .sheet(isPresented: $showingEditEvent) {
            EditEvent(myEvents: myEvents, day: $day, month: $month, year: $year, desc: $desc, startTime: $startTime, endTime: $endTime, category: $category, completed: $completed, oldEvent: $currEvent)
                .environmentObject(database)
        }
    }
}
