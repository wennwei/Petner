import SwiftUI
import Foundation

struct Home: View {
    @StateObject var taskModel : TaskViewModel = TaskViewModel()
    @Namespace var animation
    var body: some View {
        
        ScrollView(.vertical, showsIndicators: false) {
            
            LazyVStack(spacing:15, pinnedViews: [.sectionHeaders]) {
                
                Section {
                    
                    ScrollView(.horizontal,showsIndicators: false) {
                        HStack(spacing:10){
                            
                            ForEach(taskModel.currentWeek, id:\.self) {day in
                                
                                VStack(spacing:10) {
                                    
                                    Text(taskModel.extractDate(date: day, format: "dd"))
                                        .font(.system(size:15))
                                        .fontWeight(.semibold)
                                    
                                    Text(taskModel.extractDate(date: day, format: "EEE"))
                                        .font(.system(size:14))
                                    
                                    Circle()
                                        .fill(.white)
                                        .frame(width:8, height:8)
                                        .opacity(taskModel.isToday(date: day) ? 1 :0)
                                    
                                }
                                .foregroundStyle(taskModel.isToday(date: day) ? .white : .black)
                                .foregroundColor(taskModel.isToday(date: day) ? .white : .black)
                                .frame(width:45, height: 90)
                                .background()
                                .contentShape(Capsule())
                                .onTapGesture{
                                    withAnimation{
                                        taskModel.currentDay = day
                                    }
                                    /*ZStack{
                                     if taskModel.isToday(date: day){
                                     Capsule()
                                     .fill(.black)
                                     .matchedGeometryEffect(id: "CurrentDay", in: animation)
                                     } */
                                }
                            }
                        }
                        .padding(.horizontal)
                    }
                    
                    TasksView()
                    
                } header: {
                    HeaderView()
                }
            }
        }
    }
    
    func TasksView() -> some View{
        
        LazyVStack(spacing:18) {
            
            if let tasks = taskModel.filteredTasks{
                
                if tasks.isEmpty{
                    Text("no tasks found!")
                        .font(.system(size:16))
                        .fontWeight(.light)
                        .offset(y:100)
                }
                else {
                    ForEach(tasks){task in
                        TaskCardView(task: task)
                    }
                }
            }
            else{
                ProgressView()
                    .offset(y:100)
            }
        }
        .onChange(of: taskModel.currentDay) { newValue in
            taskModel.filterTodayTasks()
        }
    }
    
    func TaskCardView(task:Task)-> some View {
        HStack{
            Text(task.taskTitle)
        }
    }
    
    func HeaderView() -> some View {
        
        HStack(spacing:10){
            
            VStack(alignment: .leading, spacing: 10) {
                
                Text(Date().formatted(date: .abbreviated, time:.omitted))
                    .foregroundColor(.gray)
                
                Text("Today")
                    .font(.largeTitle.bold())
                    .foregroundColor(.black)
                
            }
            .hLeading()
        }
        .padding()
        .background(Color.white)
    }
}

struct Home_Previews: PreviewProvider {
    static var previews: some View { 
        Home()
    }
 }

extension View {
    func hLeading() -> some View {
        self
            .frame(maxWidth:.infinity,alignment:.leading)
    }
    
    func hTrailing() -> some View {
        self
            .frame(maxWidth:.infinity,alignment:.trailing)
        
    }
    
    func hCenter() -> some View {
        self
            .frame(maxWidth:.infinity,alignment:.center)
    }
    
}
