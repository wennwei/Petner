import Foundation
import SQLite3

class DBHelper: ObservableObject {
    var db : OpaquePointer?
        var path : String = "myDB.sqlite"
        init() {
            self.db = createDB()
            self.createTable()
        }
        
    func createDB() -> OpaquePointer? {
        let filePath = try! FileManager.default.url(for: .documentDirectory, in: .userDomainMask, appropriateFor: nil, create: false).appendingPathComponent(path)
        
        var db : OpaquePointer? = nil
        
        if sqlite3_open(filePath.path, &db) != SQLITE_OK {
            print("There is error in creating DB")
            return nil
        } else {
            print("Database has been created with path \(path)")
            return db
        }
    }
    
    func createTable()  {
        let createTableString = "CREATE TABLE IF NOT EXISTS events(day INTEGER, month INTEGER, year INTEGER, desc TEXT, startTime INTEGER, endTime INTEGER, category TEXT, completed INTEGER);"
        //let createTableString = "CREATE TABLE IF NOT EXISTS events(id INTEGER PRIMARY KEY AUTOINCREMENT, day INTEGER, month INTEGER, year INTEGER, desc TEXT, startTime INTEGER, endTime INTEGER, category TEXT, completed INTEGER);"
        
        var statement : OpaquePointer? = nil
        
        if sqlite3_prepare_v2(self.db, createTableString, -1, &statement, nil) == SQLITE_OK {
            if sqlite3_step(statement) == SQLITE_DONE {
                print("Table creation success")
            } else {
                print("Table creation fail")
            }
        } else {
            print("Prepration fail")
        }
        sqlite3_finalize(statement)
    }
    
    func insertEvent(day: Int, month: Int, year: Int, desc: String, startTime: Int, endTime: Int, category: String, completed: Int) {
        let insertStatementString = "INSERT INTO events (day, month, year, desc, startTime, endTime, category, completed) VALUES (?, ?, ?, ?, ?, ?, ?, ?);"
        var insertStatement: OpaquePointer? = nil

        if sqlite3_prepare_v2(db, insertStatementString, -1, &insertStatement, nil) == SQLITE_OK {
            //sqlite3_bind_int(insertStatement, 1, SQLITE_NULL)
        
            sqlite3_bind_int(insertStatement, 1, Int32(day))
            sqlite3_bind_int(insertStatement, 2, Int32(month))
            sqlite3_bind_int(insertStatement, 3, Int32(year))
            sqlite3_bind_text(insertStatement, 4, (desc as NSString).utf8String, -1, nil)
            sqlite3_bind_int(insertStatement, 5, Int32(startTime))
            sqlite3_bind_int(insertStatement, 6, Int32(endTime))
            sqlite3_bind_text(insertStatement, 7, (category as NSString).utf8String, -1, nil)
            sqlite3_bind_int(insertStatement, 8, Int32(completed))
            
            if sqlite3_step(insertStatement) == SQLITE_DONE {
                print("\nSuccessfully inserted row.")
            } else {
                print("\nCould not insert row.")
            }
        } else {
            print("\nINSERT statement is not prepared.")
        }
        sqlite3_finalize(insertStatement)
    }

    func query() -> [EventStruct] {
        var events = [EventStruct]()
        let queryStatementString = "SELECT day, month, year, desc, startTime, endTime, category, completed FROM events;"
        var queryStatement: OpaquePointer?
        if sqlite3_prepare_v2(db, queryStatementString, -1, &queryStatement, nil) == SQLITE_OK {
            while (sqlite3_step(queryStatement) == SQLITE_ROW) {
                var tempEvent = EventStruct(day: 1, month: 1, year: 2022, desc: "", startTime: 1, endTime: 2, category: "Leisure", completed: 0)
                tempEvent.day = Int(sqlite3_column_int(queryStatement, 0))
                tempEvent.month = Int(sqlite3_column_int(queryStatement, 1))
                tempEvent.year = Int(sqlite3_column_int(queryStatement, 2))
                
                guard let queryResultdesc = sqlite3_column_text(queryStatement, 3) else {
                    print("Query result is nil")
                    return events
                }
                tempEvent.desc = String(cString: queryResultdesc)
                
                tempEvent.startTime = Int(sqlite3_column_int(queryStatement, 4))
                tempEvent.endTime = Int(sqlite3_column_int(queryStatement, 5))
                
                guard let queryResultcategory = sqlite3_column_text(queryStatement, 6) else {
                    print("Query result is nil")
                    return events
                }
                tempEvent.category = String(cString: queryResultcategory)
                
                tempEvent.completed = Int(sqlite3_column_int(queryStatement, 7))
                
                events.append(tempEvent)
            }
            
        } else {
            let errorMessage = String(cString: sqlite3_errmsg(db))
            print("\nQuery is not prepared: \(errorMessage)")
        }
        sqlite3_finalize(queryStatement)
        return events
    }
    
    func delete(desc: String, day: Int) {
        let deleteStatementString = "DELETE FROM events WHERE desc LIKE '\(desc)' AND day = \(day);"
        var deleteStatement: OpaquePointer?
        if sqlite3_prepare_v2(db, deleteStatementString, -1, &deleteStatement, nil) == SQLITE_OK {
            if sqlite3_step(deleteStatement) == SQLITE_DONE {
              print("\nSuccessfully deleted row.")
            } else {
              print("\nCould not delete row.")
            }
        } else {
            print("\nDELETE statement could not be prepared")
        }
        sqlite3_finalize(deleteStatement)
    }
    
    func update(oldEvent: EventStruct, event: EventStruct) {
        let updateStatementString = "UPDATE events SET day = \(event.day), month = \(event.month), year = \(event.year), desc = '\(event.desc)', startTime = \(event.startTime), endTime = \(event.endTime), category = '\(event.category)', completed = '\(event.completed)' WHERE desc = '\(oldEvent.desc)' AND day = \(oldEvent.day);"
        var updateStatement: OpaquePointer?
        if sqlite3_prepare_v2(db, updateStatementString, -1, &updateStatement, nil) == SQLITE_OK {
            if sqlite3_step(updateStatement) == SQLITE_DONE {
                print("\nSuccessfully updated row.")
            } else {
                print("\nCould not update row.")
            }
        } else {
            print("\nUPDATE statement is not prepared")
        }
        sqlite3_finalize(updateStatement)
    }
}
