
import SwiftUI

struct Calender: View {
    @EnvironmentObject var dateHolder: DateHolder
    @EnvironmentObject var database: DBHelper
    @ObservedObject var myEvents: Events 
    
    
    let views = ["Monthly", "Weekly"]
    @Binding var viewType: String 
    
    
    // for bringing in DailyView
    @State private var showDaily = false
    @State private var daySelected = Date.now
    
    
    
    var body: some View {
        NavigationView {
            VStack {
                DateScrollerView()
                    .padding([.leading, .bottom, .trailing])
                    .environmentObject(dateHolder)
                dayOfWeekStack
                calendarGrid
                
                NavigationLink("", destination: DailyView(currDay: daySelected, myEvents: myEvents).environmentObject(database) , isActive: $showDaily)
                
                Spacer()
            }
            .toolbar {
                ToolbarItem(placement: .navigation) {
                    Button("                ") {}
                }
                ToolbarItem(placement: .principal) {
                    Picker("View", selection: $viewType) {
                        ForEach(views, id: \.self) {
                            Text("\($0)")
                        }
                    }
                    .pickerStyle(.segmented)
                }
                ToolbarItem(placement: .primaryAction) {
                    Button("                ") {}
                }
            }
        }
    }
    
    var dayOfWeekStack: some View {
        HStack(spacing: 1) {
            Text("Sun").dayOfWeek()
            Text("Mon").dayOfWeek()
            Text("Tue").dayOfWeek()
            Text("Wed").dayOfWeek()
            Text("Thu").dayOfWeek()
            Text("Fri").dayOfWeek()
            Text("Sat").dayOfWeek()
        }
    }
    
    var calendarGrid: some View {
        VStack(spacing: 10) {
            let daysInMonth = CalendarHelper().daysInMonth(dateHolder.date)
            let firstDayOfMonth = CalendarHelper().firstOfMonth(dateHolder.date)
            let startingSpaces = CalendarHelper().weekDay(firstDayOfMonth)
            let prevMonth = CalendarHelper().minusMonth(dateHolder.date)
            let daysInPrevMonth = CalendarHelper().daysInMonth(prevMonth)
            
            ForEach(0..<6) { row in
                HStack(spacing: 1) {
                    ForEach(1..<8) { column in
                        let count = column + (row * 7)
                        let dayCell = CalendarHelper().monthStruct(currDate: dateHolder.date, count: count, startingSpaces: startingSpaces, daysInMonth: daysInMonth, daysInPrevMonth: daysInPrevMonth) // get MonthStruct of each day in calendar
                        Button {
                            let selectedDay = dayCell.dayDetails // get details of day that is tapped on
                            CalendarHelper().getEvents(database: database, myEvents: myEvents) // update array with data from database
                            CalendarHelper().sortCompleted(myEvent: myEvents) // sort completed/incomplete events in the array
                            goToDaily(selectedDay: selectedDay) //
                            
                        } label: {
                            CalendarCell(dayCell: dayCell)
                                .environmentObject(dateHolder)
                        }
                    }
                }
            }
        }
        .frame(maxHeight: 400)
    }
    
    // bring up dailyview on the day which is tapped on
    func goToDaily(selectedDay: Date) {
        daySelected = selectedDay
        showDaily = true
    }
    
    
}


extension Text {
    func dayOfWeek() -> some View {
        self.frame(maxWidth: .infinity)
            .padding(.vertical, 10)
            .lineLimit(1)
            .font(.title2)
        
    }
}
