import SwiftUI

struct DailyView: View {
    
    @EnvironmentObject var database: DBHelper
    var currDay: Date

    
    @ObservedObject var myEvents: Events
    @State private var showingEditEvent = false // for editting/deleting events
    @State private var showingAddEvent = false  // for adding events
    
    // for EditEvent
    @State private var day: Int = 0
    @State private var month: Int = 0
    @State private var year: Int = 0
    @State private var desc: String = ""
    @State private var startTime: Int = 0
    @State private var endTime: Int = 0
    @State private var category: String = ""
    @State private var completed: Int = 0
    @State private var currEvent = EventStruct(day: 0, month: 0, year: 0, desc: "", startTime: 0, endTime: 0, category: "", completed: 0)
    
    @State private var eventArray = [EventStruct]()
    
    var body: some View {
        List {
            Section(header: Text("Exam")) {
                examRow
            }
            Section(header: Text("Leisure")) {
                leisureRow
            }
        }
        .navigationTitle(CalendarHelper().dayMonthYearString(currDay))
        .toolbar {
            ToolbarItem(placement: .automatic) {
                Button {
                    showingAddEvent = true
                } label: {
                    Image(systemName: "plus")
                        .fixedSize(horizontal: true, vertical: false)
                }
            }
        }
        .sheet(isPresented: $showingAddEvent) {
            AddEvent(myEvents: myEvents, currDay: currDay)
                .environmentObject(database)
        }
        .sheet(isPresented: $showingEditEvent) {
            EditEvent(myEvents: myEvents, day: $day, month: $month, year: $year, desc: $desc, startTime: $startTime, endTime: $endTime, category: $category, completed: $completed, oldEvent: $currEvent)
                .environmentObject(database)
        }
    }
    
    var examRow: some View {
        ForEach(myEvents.examEvents, id: \.self) { event in
            if checkIfSameDay(selectedDay: currDay, event: event) {
                Button {
                    goToEdit(event: event)
                } label: {
                    VStack {
                        HStack {
                            Text(event.desc)
                                .font(.title3)
                                .fontWeight(.semibold)
                                .padding(.bottom, 8)
                                .padding(.top, 5)
                                
                            Spacer()
                            Button {
                                
                            } label: {
                                Image(systemName: "circle")
                            }
                            .foregroundColor(.orange)
                        }
                        HStack {
                            Text("Starts: \(event.startTime)  Ends: \(event.endTime)")
                            Spacer()
                        }
                    }
                }
                .foregroundColor(.primary)
            }
        }
    }
    
    var leisureRow: some View {
        ForEach(myEvents.leisureEvents, id: \.self) { event in
            if checkIfSameDay(selectedDay: currDay, event: event) {
                Button {
                    goToEdit(event: event)
                } label: {
                    VStack {
                        HStack {
                            Text(event.desc)
                                .font(.title3)
                                .fontWeight(.semibold)
                                .padding(.bottom, 8)
                                .padding(.top, 5)
                                
                            Spacer()
                            Button {
                                
                            } label: {
                                Image(systemName: "circle")
                            }
                            .foregroundColor(.orange)
                        }
                        HStack {
                            Text("Starts: \(event.startTime)  Ends: \(event.endTime)")
                            Spacer()
                        }
                    }
                }
                .foregroundColor(.primary)
            }
        }
    }
    
    func checkIfSameDay(selectedDay: Date, event: EventStruct) -> Bool {
        let components = Calendar.current.dateComponents([.day, .month, .year], from: selectedDay)
        let day = components.day ?? 0
        let month = components.month ?? 0
        let year = components.year ?? 0
        if event.day == day && event.month == month && event.year == year {
            return true
        }
        return false
    }
    
    func goToEdit(event: EventStruct) {
        currEvent = event // make currEvent contain details of event that is tapped
        day = event.day
        month = event.month
        year = event.year
        desc = event.desc
        startTime = event.startTime
        endTime = event.endTime
        category = event.category
        completed = event.completed
        showingEditEvent = true
    }
    
}

struct DailyView_Previews: PreviewProvider {
    static var previews: some View {
        let myEvents = Events()
        let database = DBHelper()
       
        DailyView(currDay: Date.now, myEvents: myEvents)
            .environmentObject(database)
    }
}
