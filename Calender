import SwiftUI

struct Calender: View {
    
    @EnvironmentObject var dateHolder: DateHolder
    @State private var viewType = "Monthly"
    let views = ["Monthly", "Weekly"]
    
    var body: some View {
        NavigationView {
            ScrollView(.vertical, showsIndicators: false) {
                VStack {
                    DateScrollerView()
                        .environmentObject(dateHolder)
                        .padding()
                    dayOfWeekStack
                    calendarGrid
                }
            
            }
            .toolbar {
                ToolbarItem(placement: .navigation) {
                    Button("                ") {}
                }
                ToolbarItem(placement: .principal) {
                    Picker("View", selection: $viewType) {
                        ForEach(views, id: \.self) {
                            Text("\($0)")
                        }
                    }
                    .pickerStyle(.segmented)
                }
                ToolbarItem(placement: .primaryAction) {
                    Button("                ") {}
                }
            }
        }
    }

    var dayOfWeekStack: some View {
        HStack(spacing: 1) {
            Text("Sun").dayOfWeek()
            Text("Mon").dayOfWeek()
            Text("Tue").dayOfWeek()
            Text("Wed").dayOfWeek()
            Text("Thu").dayOfWeek()
            Text("Fri").dayOfWeek()
            Text("Sat").dayOfWeek()
        }
    }
    
    var calendarGrid: some View {
        
        VStack(spacing: 40) {
            let daysInMonth = CalendarHelper().daysInMonth(dateHolder.date)
            let firstDayOfMonth = CalendarHelper().firstOfMonth(dateHolder.date)
            let startingSpaces = CalendarHelper().weekDay(firstDayOfMonth)
            let prevMonth = CalendarHelper().minusMonth(dateHolder.date)
            let daysInPrevMonth = CalendarHelper().daysInMonth(prevMonth)
            
            ForEach(0..<6) { row in
                HStack(spacing: 1) {
                    ForEach(1..<8) { column in
                        let count = column + (row * 7)
                        CalendarCell(count: count, startingSpaces:startingSpaces, daysInMonth: daysInMonth, daysInPrevMonth: daysInPrevMonth)
                            .environmentObject(dateHolder)
                        
                    }
                }
            }
        }
        .frame(maxHeight: .infinity)
    }
}

struct Calender_Previews: PreviewProvider {
    @StateObject static var dateholder = DateHolder()
    static var previews: some View {
        Calender()
            .environmentObject(dateholder)
    }
}


extension Text {
    func dayOfWeek() -> some View {
        self.frame(maxWidth: .infinity)
            .padding(.vertical, 10)
            .lineLimit(1)
            .font(.title2)
            
    }
}
