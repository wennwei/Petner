import SwiftUI

class Events: ObservableObject {
    @Published var leisureEvents = [EventStruct]()
    @Published var examEvents = [EventStruct]()
    @Published var classEvents = [EventStruct]()
    @Published var assignmentEvents = [EventStruct]()
    @Published var revisionEvents = [EventStruct]()
}

struct ContentView: View {
    @StateObject var myEvents = Events() // creating an instance of Events class to store array of different category of events
    @StateObject var database = DBHelper()
    
    let views = ["Monthly", "Weekly"]
    @State private var viewType = "Weekly"
    
    var body: some View {
        TabView {
            if viewType == "Monthly" {
                Calender(myEvents: myEvents, viewType: $viewType)
                    .tabItem {
                        Label("Calendar", systemImage: "calendar")
                    }
            } else {
                WeeklyView(viewType: $viewType, myEvents: myEvents)
                    .tabItem {
                        Label("Calendar", systemImage: "calendar")
                    }
            }
            Preview(myEvents: myEvents)
                .tabItem {
                    Label("Preview", systemImage: "list.dash")
                }
            Review(myEvents: myEvents)
                .tabItem {
                    Label("Review", systemImage: "checklist")
                }
            Pet()
                .tabItem {
                    Label("Pet", systemImage: "pawprint")
                }
        }
        .environmentObject(database)
    }
}

struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        let dateHolder = DateHolder()
        let database = DBHelper()
        ContentView()
            .environmentObject(dateHolder)
            .environmentObject(database)
        
    }
}

