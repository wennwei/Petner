import SwiftUI

class TaskViewModel: ObservableObject{
    
    @Published var storedTasks:[Task] = [
        Task(taskTitle: "Meeting", taskDescription: "Discuss team task for the day", taskDate: Date()),/*.init(timeIntervalSince1970: 1641645497))*/
        Task(taskTitle: "Icon Set", taskDescription: "Edit Icons for team last week", taskDate: .init(timeIntervalSince1970: 1641649097)),
        Task(taskTitle: "Prototype", taskDescription: "Make and send prototype", taskDate: .init(timeIntervalSince1970: 1641652697))
    ]
    @Published var currentWeek: [Date] = []
    @Published var currentDay: Date = Date()
    @Published var filteredTasks: [Task]? // same as [Task] = [Task]()
    init() {
        fetchCurrentWeek()
        filterTodayTasks()
    }
    
    func filterTodayTasks(){
        
        DispatchQueue.global(qos: .userInteractive).async {
            let calendar = Calendar.current
            
            let filtered = self.storedTasks.filter{
                return calendar.isDate($0.taskDate, inSameDayAs: self.currentDay)
            }
        
            DispatchQueue.main.async {
                withAnimation{self.filteredTasks = filtered
                }
            }
        }
    }
    
    func fetchCurrentWeek() {
        let today = Date()
        let calendar = Calendar.current
        
        let week = calendar.dateInterval(of: .weekOfMonth, for:today)
        
        guard let firstWeekDay = week?.start else{
            return
        }
        
        (1...7).forEach {day in
            
            if let weekday = calendar.date(byAdding: .day, value: day, to: firstWeekDay) {
                currentWeek.append(weekday)
            }
        }
    }
    
    func extractDate(date: Date, format: String) -> String {
        let formatter = DateFormatter()
        
        formatter.dateFormat = format
        
        return formatter.string(from: date)
    }
    
    func isToday(date: Date)-> Bool {
        let calendar = Calendar.current
        
        return calendar.isDate(currentDay, inSameDayAs:date)
    }
}

